{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.0"},"colab":{"name":"2020.AI.Lab_multivariable_linear_regression.ipynb의 사본","provenance":[{"file_id":"1T3L1mMZrlyWVovWemiL4rM52sQlgmlvY","timestamp":1587640288336}],"collapsed_sections":[]}},"cells":[{"cell_type":"markdown","metadata":{"id":"McZIpmOe0a6r","colab_type":"text"},"source":["# Lab 4-1: Multivariate Linear Regression"]},{"cell_type":"markdown","metadata":{"id":"UDqk5dF00a6u","colab_type":"text"},"source":["## Theoretical Overview"]},{"cell_type":"markdown","metadata":{"id":"BvfBIgEI0a6v","colab_type":"text"},"source":["$$ H(x_1, x_2, x_3) = x_1w_1 + x_2w_2 + x_3w_3 + b $$"]},{"cell_type":"markdown","metadata":{"id":"F3DoqZ--0a6v","colab_type":"text"},"source":["$$ cost(W, b) = \\frac{1}{m} \\sum^m_{i=1} \\left( H(x^{(i)}) - y^{(i)} \\right)^2 $$"]},{"cell_type":"markdown","metadata":{"id":"ms9Fo9bS0a6w","colab_type":"text"},"source":[" - $H(x)$: 주어진 $x$ 값에 대해 예측을 어떻게 할 것인가\n"," - $cost(W, b)$: $H(x)$ 가 $y$ 를 얼마나 잘 예측했는가"]},{"cell_type":"markdown","metadata":{"id":"RU3kYG0c0a6w","colab_type":"text"},"source":["## Imports"]},{"cell_type":"code","metadata":{"id":"coYX71Aq0a6x","colab_type":"code","colab":{}},"source":["import torch\n","import torch.optim as optim"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"HkPxM3-60a60","colab_type":"code","outputId":"987aff3c-435f-4b93-c85f-49c8154cca8c","executionInfo":{"status":"ok","timestamp":1587640375849,"user_tz":-540,"elapsed":2996,"user":{"displayName":"Juhee","photoUrl":"","userId":"14369088239483395487"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["# For reproducibility\n","torch.manual_seed(1)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<torch._C.Generator at 0x7f1306a59d90>"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"markdown","metadata":{"id":"r1YeWQCQ0a63","colab_type":"text"},"source":["## Naive Data Representation\n","\n","- 먼저 매트릭스 없이 풀어보기"]},{"cell_type":"markdown","metadata":{"id":"7FLA7SE-0a64","colab_type":"text"},"source":["We will use fake data for this example."]},{"cell_type":"code","metadata":{"id":"0tZT6O670a64","colab_type":"code","colab":{}},"source":["# 학습용 데이터\n","x1_train = torch.FloatTensor([[73], [93], [89], [96], [73]])\n","x2_train = torch.FloatTensor([[80], [88], [91], [98], [66]])\n","x3_train = torch.FloatTensor([[75], [93], [90], [100], [70]])\n","y_train = torch.FloatTensor([[152], [185], [180], [196], [142]])\n","\n","# instance(학생)는 5.    multivariable(시험)은 3.\n","# 학생1은 첫퀴즈 x1 73점, x2 80점, x3 75점 맞았다. \n","# 학생1은 y(기말고사)는 몇점을 맞을까? 152점을 맞았다. \n","\n","# 먼저 매트릭스 없이 풀어보기"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kC7PxWDr0a67","colab_type":"code","outputId":"a62f75aa-82ad-43df-9b1b-e0efeb4e0f32","executionInfo":{"status":"ok","timestamp":1587641795907,"user_tz":-540,"elapsed":1246,"user":{"displayName":"Juhee","photoUrl":"","userId":"14369088239483395487"}},"colab":{"base_uri":"https://localhost:8080/","height":924}},"source":["# 모델 초기화\n","w1 = torch.zeros(1, requires_grad=True)\n","w2 = torch.zeros(1, requires_grad=True)\n","w3 = torch.zeros(1, requires_grad=True)\n","b = torch.zeros(1, requires_grad=True)\n","\n","# optimizer 설정\n","optimizer = optim.SGD([w1, w2, w3, b], lr=1e-5)  #learning rate는 10에 -5승\n","\n","nb_epochs = 1000     #10000, 100000, 등등 넣어보자. cost값이 가장 작아지도록.\n","for epoch in range(nb_epochs + 1):  \n","    \n","    # H(x) 계산\n","    hypothesis = x1_train * w1 + x2_train * w2 + x3_train * w3 + b\n","\n","    # cost 계산\n","    cost = torch.mean((hypothesis - y_train) ** 2)\n","\n","    # cost로 H(x) 개선\n","    optimizer.zero_grad()\n","    cost.backward()\n","    optimizer.step()\n","\n","    # 100번마다 로그 출력\n","    if epoch % 100 == 0:\n","        print('Epoch {:4d}/{} w1: {:.3f} w2: {:.3f} w3: {:.3f} b: {:.3f} Cost: {:.6f}'.format(\n","            epoch, nb_epochs, w1.item(), w3.item(), w3.item(), b.item(), cost.item()\n","        ))\n","\n","\n","# 10000번 돌리니까 cost값이 더 떨어짐 하지만 아직 cost의 가장 작은 값에 도달하지 못했다.\n","# 이로 인해서 더 많이 돌리게 되면, 돌리는데 오래 걸림\n","# 이럴때에는 learning rate값을 높이자.\n","  # learning rate= 1e-3과 1e-4을 넣으니 cost가 nan이 나옴. 이는 learning rate값을 너무 크게 잡아서 발산한 것이다.\n","# 이 경우에는 어쩔 수 없이 1e-5로 넣기...\n","# cost가 더이상 작아지지 않을 때까지 넣기."],"execution_count":0,"outputs":[{"output_type":"stream","text":["Epoch    0/1000 w1: 0.294 w2: 0.297 w3: 0.297 b: 0.003 Cost: 29661.800781\n","Epoch   20/1000 w1: 0.669 w2: 0.676 w3: 0.676 b: 0.008 Cost: 1.619046\n","Epoch   40/1000 w1: 0.670 w2: 0.676 w3: 0.676 b: 0.008 Cost: 1.604975\n","Epoch   60/1000 w1: 0.671 w2: 0.676 w3: 0.676 b: 0.008 Cost: 1.591051\n","Epoch   80/1000 w1: 0.672 w2: 0.676 w3: 0.676 b: 0.008 Cost: 1.577259\n","Epoch  100/1000 w1: 0.674 w2: 0.676 w3: 0.676 b: 0.008 Cost: 1.563628\n","Epoch  120/1000 w1: 0.675 w2: 0.676 w3: 0.676 b: 0.008 Cost: 1.550127\n","Epoch  140/1000 w1: 0.676 w2: 0.676 w3: 0.676 b: 0.008 Cost: 1.536799\n","Epoch  160/1000 w1: 0.677 w2: 0.677 w3: 0.677 b: 0.008 Cost: 1.523601\n","Epoch  180/1000 w1: 0.678 w2: 0.677 w3: 0.677 b: 0.008 Cost: 1.510530\n","Epoch  200/1000 w1: 0.679 w2: 0.677 w3: 0.677 b: 0.008 Cost: 1.497595\n","Epoch  220/1000 w1: 0.680 w2: 0.677 w3: 0.677 b: 0.008 Cost: 1.484808\n","Epoch  240/1000 w1: 0.681 w2: 0.677 w3: 0.677 b: 0.008 Cost: 1.472175\n","Epoch  260/1000 w1: 0.682 w2: 0.677 w3: 0.677 b: 0.008 Cost: 1.459665\n","Epoch  280/1000 w1: 0.683 w2: 0.677 w3: 0.677 b: 0.008 Cost: 1.447264\n","Epoch  300/1000 w1: 0.684 w2: 0.677 w3: 0.677 b: 0.008 Cost: 1.435044\n","Epoch  320/1000 w1: 0.685 w2: 0.677 w3: 0.677 b: 0.008 Cost: 1.422914\n","Epoch  340/1000 w1: 0.686 w2: 0.678 w3: 0.678 b: 0.008 Cost: 1.410922\n","Epoch  360/1000 w1: 0.687 w2: 0.678 w3: 0.678 b: 0.008 Cost: 1.399065\n","Epoch  380/1000 w1: 0.688 w2: 0.678 w3: 0.678 b: 0.008 Cost: 1.387348\n","Epoch  400/1000 w1: 0.689 w2: 0.678 w3: 0.678 b: 0.008 Cost: 1.375726\n","Epoch  420/1000 w1: 0.690 w2: 0.678 w3: 0.678 b: 0.008 Cost: 1.364231\n","Epoch  440/1000 w1: 0.691 w2: 0.678 w3: 0.678 b: 0.008 Cost: 1.352875\n","Epoch  460/1000 w1: 0.692 w2: 0.678 w3: 0.678 b: 0.008 Cost: 1.341628\n","Epoch  480/1000 w1: 0.693 w2: 0.678 w3: 0.678 b: 0.008 Cost: 1.330515\n","Epoch  500/1000 w1: 0.694 w2: 0.678 w3: 0.678 b: 0.009 Cost: 1.319497\n","Epoch  520/1000 w1: 0.695 w2: 0.678 w3: 0.678 b: 0.009 Cost: 1.308618\n","Epoch  540/1000 w1: 0.696 w2: 0.678 w3: 0.678 b: 0.009 Cost: 1.297845\n","Epoch  560/1000 w1: 0.697 w2: 0.679 w3: 0.679 b: 0.009 Cost: 1.287185\n","Epoch  580/1000 w1: 0.698 w2: 0.679 w3: 0.679 b: 0.009 Cost: 1.276651\n","Epoch  600/1000 w1: 0.699 w2: 0.679 w3: 0.679 b: 0.009 Cost: 1.266215\n","Epoch  620/1000 w1: 0.700 w2: 0.679 w3: 0.679 b: 0.009 Cost: 1.255901\n","Epoch  640/1000 w1: 0.701 w2: 0.679 w3: 0.679 b: 0.009 Cost: 1.245692\n","Epoch  660/1000 w1: 0.702 w2: 0.679 w3: 0.679 b: 0.009 Cost: 1.235594\n","Epoch  680/1000 w1: 0.703 w2: 0.679 w3: 0.679 b: 0.009 Cost: 1.225582\n","Epoch  700/1000 w1: 0.704 w2: 0.679 w3: 0.679 b: 0.009 Cost: 1.215703\n","Epoch  720/1000 w1: 0.705 w2: 0.679 w3: 0.679 b: 0.009 Cost: 1.205924\n","Epoch  740/1000 w1: 0.706 w2: 0.679 w3: 0.679 b: 0.009 Cost: 1.196233\n","Epoch  760/1000 w1: 0.707 w2: 0.679 w3: 0.679 b: 0.009 Cost: 1.186667\n","Epoch  780/1000 w1: 0.708 w2: 0.679 w3: 0.679 b: 0.009 Cost: 1.177194\n","Epoch  800/1000 w1: 0.709 w2: 0.679 w3: 0.679 b: 0.009 Cost: 1.167810\n","Epoch  820/1000 w1: 0.710 w2: 0.680 w3: 0.680 b: 0.009 Cost: 1.158543\n","Epoch  840/1000 w1: 0.711 w2: 0.680 w3: 0.680 b: 0.009 Cost: 1.149368\n","Epoch  860/1000 w1: 0.712 w2: 0.680 w3: 0.680 b: 0.009 Cost: 1.140296\n","Epoch  880/1000 w1: 0.713 w2: 0.680 w3: 0.680 b: 0.009 Cost: 1.131307\n","Epoch  900/1000 w1: 0.713 w2: 0.680 w3: 0.680 b: 0.009 Cost: 1.122429\n","Epoch  920/1000 w1: 0.714 w2: 0.680 w3: 0.680 b: 0.009 Cost: 1.113626\n","Epoch  940/1000 w1: 0.715 w2: 0.680 w3: 0.680 b: 0.009 Cost: 1.104925\n","Epoch  960/1000 w1: 0.716 w2: 0.680 w3: 0.680 b: 0.009 Cost: 1.096329\n","Epoch  980/1000 w1: 0.717 w2: 0.680 w3: 0.680 b: 0.009 Cost: 1.087810\n","Epoch 1000/1000 w1: 0.718 w2: 0.680 w3: 0.680 b: 0.009 Cost: 1.079390\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"035iuRAm0a69","colab_type":"text"},"source":["## **Matrix** Data Representation"]},{"cell_type":"markdown","metadata":{"id":"WTW_7xtg0a69","colab_type":"text"},"source":["$$\n","\\begin{pmatrix}\n","x_1 & x_2 & x_3\n","\\end{pmatrix}\n","\\cdot\n","\\begin{pmatrix}\n","w_1 \\\\\n","w_2 \\\\\n","w_3 \\\\\n","\\end{pmatrix}\n","=\n","\\begin{pmatrix}\n","x_1w_1 + x_2w_2 + x_3w_3\n","\\end{pmatrix}\n","$$"]},{"cell_type":"markdown","metadata":{"id":"bl800ccG0a6-","colab_type":"text"},"source":["$$ H(X) = XW $$"]},{"cell_type":"code","metadata":{"id":"8RIiVFC00a6-","colab_type":"code","colab":{}},"source":["x_train = torch.FloatTensor([[73, 80, 75],\n","                             [93, 88, 93],\n","                             [89, 91, 90],\n","                             [96, 98, 100],\n","                             [73, 66, 70]])\n","y_train = torch.FloatTensor([[152], [185], [180], [196], [142]])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"4DofTSTA0a7B","colab_type":"code","outputId":"9f9de8b3-018f-4c04-f3ee-1dec5156eeea","executionInfo":{"status":"ok","timestamp":1587641087762,"user_tz":-540,"elapsed":614,"user":{"displayName":"Juhee","photoUrl":"","userId":"14369088239483395487"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"source":["print(x_train.shape)\n","print(y_train.shape)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["torch.Size([5, 3])\n","torch.Size([5, 1])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"xnvBU3BC0a7D","colab_type":"code","outputId":"a1d26587-492b-4098-b49f-cf67a613a075","executionInfo":{"status":"ok","timestamp":1587641706932,"user_tz":-540,"elapsed":719,"user":{"displayName":"Juhee","photoUrl":"","userId":"14369088239483395487"}},"colab":{"base_uri":"https://localhost:8080/","height":390}},"source":["'''\n","# 매트릭스 없이 위에서 모델 초기화 할때는 일일이 해줬음\n","\n","w1 = torch.zeros(1, requires_grad=True)\n","w2 = torch.zeros(1, requires_grad=True)\n","w3 = torch.zeros(1, requires_grad=True)\n","b = torch.zeros(1, requires_grad=True)\n","'''\n","\n","# 모델 초기화\n","W = torch.zeros((3, 1), requires_grad=True)\n","b = torch.zeros(1, requires_grad=True)\n","\n","# optimizer 설정\n","optimizer = optim.SGD([W, b], lr=1e-5)\n","\n","nb_epochs = 20\n","for epoch in range(nb_epochs + 1):\n","    \n","    # H(x) 계산\n","    # 원래 위의 계산 :  hypothesis = x1_train * w1 + x2_train * w2 + x3_train * w3 + b\n","    # Matrix 연산을 이용한 계산\n","    hypothesis = x_train.matmul(W) + b # or .mm or @    \n","\n","    # cost 계산\n","    cost = torch.mean((hypothesis - y_train) ** 2)\n","\n","    # cost로 H(x) 개선 (W,b 갱신)\n","    optimizer.zero_grad()\n","    cost.backward()\n","    optimizer.step()\n","\n","    # 100번마다 로그 출력\n","    print('Epoch {:4d}/{} hypothesis: {} Cost: {:.6f}'.format(\n","        epoch, nb_epochs, hypothesis.squeeze().detach(), cost.item()\n","    ))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Epoch    0/20 hypothesis: tensor([0., 0., 0., 0., 0.]) Cost: 29661.800781\n","Epoch    1/20 hypothesis: tensor([67.2578, 80.8397, 79.6523, 86.7394, 61.6605]) Cost: 9298.520508\n","Epoch    2/20 hypothesis: tensor([104.9128, 126.0990, 124.2466, 135.3015,  96.1821]) Cost: 2915.712402\n","Epoch    3/20 hypothesis: tensor([125.9942, 151.4381, 149.2133, 162.4896, 115.5097]) Cost: 915.040527\n","Epoch    4/20 hypothesis: tensor([137.7967, 165.6247, 163.1911, 177.7112, 126.3307]) Cost: 287.936096\n","Epoch    5/20 hypothesis: tensor([144.4044, 173.5674, 171.0168, 186.2332, 132.3891]) Cost: 91.371071\n","Epoch    6/20 hypothesis: tensor([148.1035, 178.0143, 175.3980, 191.0042, 135.7812]) Cost: 29.758249\n","Epoch    7/20 hypothesis: tensor([150.1744, 180.5042, 177.8509, 193.6753, 137.6805]) Cost: 10.445267\n","Epoch    8/20 hypothesis: tensor([151.3336, 181.8983, 179.2240, 195.1707, 138.7440]) Cost: 4.391237\n","Epoch    9/20 hypothesis: tensor([151.9824, 182.6789, 179.9928, 196.0079, 139.3396]) Cost: 2.493121\n","Epoch   10/20 hypothesis: tensor([152.3454, 183.1161, 180.4231, 196.4765, 139.6732]) Cost: 1.897688\n","Epoch   11/20 hypothesis: tensor([152.5485, 183.3609, 180.6640, 196.7389, 139.8602]) Cost: 1.710552\n","Epoch   12/20 hypothesis: tensor([152.6620, 183.4982, 180.7988, 196.8857, 139.9651]) Cost: 1.651416\n","Epoch   13/20 hypothesis: tensor([152.7253, 183.5752, 180.8742, 196.9678, 140.0240]) Cost: 1.632369\n","Epoch   14/20 hypothesis: tensor([152.7606, 183.6184, 180.9164, 197.0138, 140.0571]) Cost: 1.625924\n","Epoch   15/20 hypothesis: tensor([152.7802, 183.6427, 180.9399, 197.0395, 140.0759]) Cost: 1.623420\n","Epoch   16/20 hypothesis: tensor([152.7909, 183.6565, 180.9530, 197.0538, 140.0865]) Cost: 1.622152\n","Epoch   17/20 hypothesis: tensor([152.7968, 183.6643, 180.9603, 197.0618, 140.0927]) Cost: 1.621261\n","Epoch   18/20 hypothesis: tensor([152.7999, 183.6688, 180.9644, 197.0661, 140.0963]) Cost: 1.620501\n","Epoch   19/20 hypothesis: tensor([152.8014, 183.6715, 180.9665, 197.0686, 140.0985]) Cost: 1.619757\n","Epoch   20/20 hypothesis: tensor([152.8020, 183.6731, 180.9677, 197.0699, 140.0999]) Cost: 1.619046\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"32wvmPoiMF10","colab_type":"code","outputId":"3e49bdfc-e07d-4556-dd26-392ec6bc2cb7","executionInfo":{"status":"ok","timestamp":1586607972215,"user_tz":-540,"elapsed":1271,"user":{"displayName":"Yukyung Choi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgMv6tMGCLpwz9d_Y4fWpsRP60l-pQkAM66JfrC=s64","userId":"03298431101037273724"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["print(W)\n","print(b)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["tensor([[0.6691],\n","        [0.6659],\n","        [0.6758]], requires_grad=True)\n","tensor([0.0092], requires_grad=True)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"NxR6bCz9NFn3","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}